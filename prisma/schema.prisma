generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  CLIENT
  FREELANCER
  USER
}

enum JobStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ProposalStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum ContractStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum TransactionStatus {
  PENDING
  ESCROW_HELD
  COMPLETED
  CANCELLED
  DISPUTED
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  username    String   @unique
  password    String
  firstName   String
  lastName    String
  userType    UserType  
  piWalletId  String?
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Profile
  profile     Profile?
  
  // Relations
  postedJobs  Job[]    @relation("JobPoster")
  proposals   Proposal[]
  contracts   Contract[] @relation("Freelancer")
  hiredContracts Contract[] @relation("Client")
  
  // Reviews
  reviewsGiven Review[] @relation("ReviewGiver")
  reviewsReceived Review[] @relation("ReviewReceiver")

  //transaction
  clientTransactions Transaction[] @relation("ClientTransactions")
  freelancerTransactions Transaction[] @relation("FreelancerTransactions")

  @@index([userType])
  @@index([createdAt])
  @@map("users")

}

model Profile {
  id          String  @id @default(cuid())
  userId      String  @unique
  title       String?
  description String?
  hourlyRate  Float?
  avatar      String?
  location    String?
  website     String?
  
  skills      Skill[]
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("profiles")
}

model Skill {
  id        String  @id @default(cuid())
  name      String  @unique
  profiles  Profile[]
  jobs      Job[]
  
  @@map("skills")
}

model Job {
  id          String    @id @default(cuid())
  title       String
  description String
  budget      Float
  duration    String?
  status      JobStatus @default(OPEN)
  isHourly    Boolean   @default(false)
  clientId    String   
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  client      User        @relation("JobPoster", fields: [clientId], references: [id])
  skills      Skill[]
  proposals   Proposal[]
  contract    Contract?
  transactions Transaction[]
  
  @@index([status])
  @@index([clientId])
  @@index([createdAt])
  @@index([status, createdAt])
  @@map("jobs")
}

model Proposal {
  id            String         @id @default(cuid())
  jobId         String
  freelancerId  String
  coverLetter   String
  proposedRate  Float
  duration      String?
  status        ProposalStatus @default(PENDING)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  job           Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  freelancer    User     @relation(fields: [freelancerId], references: [id])
  
  @@unique([jobId, freelancerId])
  @@map("proposals")
}

model Contract {
  id           String         @id @default(cuid())
  jobId        String         @unique
  clientId     String
  freelancerId String
  title        String
  description  String
  amount       Float
  startDate    DateTime?
  endDate      DateTime?
  status       ContractStatus @default(ACTIVE)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  
  job          Job            @relation(fields: [jobId], references: [id])
  client       User           @relation("Client", fields: [clientId], references: [id])
  freelancer   User           @relation("Freelancer", fields: [freelancerId], references: [id])
  milestones   Milestone[]
  transactions Transaction[]
  
  @@map("contracts")
}

model Milestone {
  id          String   @id @default(cuid())
  contractId  String
  title       String
  description String?
  amount      Float
  dueDate     DateTime?
  isCompleted Boolean  @default(false)
  isPaid      Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  contract    Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
  
  @@map("milestones")
}

model Transaction {
  id           String            @id @default(cuid())
  contractId   String?           // Optional link to contract
  jobId        String
  clientId     String
  freelancerId String
  amount       Float
  platformFee  Float            // 8% of amount
  netAmount    Float            // amount - platformFee
  status       TransactionStatus @default(PENDING)
  piTxHash     String?          // Pi Network transaction hash
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  
  contract     Contract?        @relation(fields: [contractId], references: [id])
  job          Job              @relation(fields: [jobId], references: [id])
  client       User             @relation("ClientTransactions", fields: [clientId], references: [id])
  freelancer   User             @relation("FreelancerTransactions", fields: [freelancerId], references: [id])

  @@map("transactions")
}

model Review {
  id           String  @id @default(cuid())
  contractId   String?
  giverId      String
  receiverId   String
  rating       Int
  comment      String?
  createdAt    DateTime @default(now())
  
  giver        User    @relation("ReviewGiver", fields: [giverId], references: [id])
  receiver     User    @relation("ReviewReceiver", fields: [receiverId], references: [id])
  
  @@map("reviews")
}
